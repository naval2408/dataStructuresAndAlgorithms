Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length==0)
        {
            return new ArrayList<Integer>();
        }
        int numberOfRows = matrix.length;
        int numberOfColumns = matrix[0].length;
        int startIndexOfRows = 0;
        int endIndexOfRows = numberOfRows-1;
        int endIndexOfColumns = numberOfColumns-1;
        int startIndexOfColumns = 0;
        List<Integer> result = new ArrayList<Integer>();
        while(startIndexOfRows<=endIndexOfRows && startIndexOfColumns<=endIndexOfColumns)
        {
          
            for(int i = startIndexOfColumns;i<=endIndexOfColumns;i++)
            {
                result.add(matrix[startIndexOfRows][i]);
            }
            startIndexOfRows++;
            
            for(int i = startIndexOfRows; i<= endIndexOfRows;i++)
            {
                result.add(matrix[i][endIndexOfColumns]);
            }
            endIndexOfColumns--;
            
            if(startIndexOfRows<=endIndexOfRows)
            {              
                
                for(int i = endIndexOfColumns; i>=startIndexOfColumns;i--)
                {
  
                    result.add(matrix[endIndexOfRows][i]);
                }
                endIndexOfRows--;
            }
            
            if(startIndexOfColumns<=endIndexOfColumns )
            {
                
                for(int i = endIndexOfRows; i>= startIndexOfRows;i--)
                {
                    result.add(matrix[i][startIndexOfColumns]);
                }
                startIndexOfColumns++;
            }            
        }
        return result;
    }
}