You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
Example 2:

Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]



class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        if matrix is None :
            return
        if len(matrix) == 0 or len(matrix[0]) == 0 :
            return
        for i in range(0,len(matrix)):
            for j in range (0,i):
                temp = matrix[j][i]
                matrix[j][i]=matrix[i][j]
                matrix[i][j] = temp
        for i in range(0,len(matrix)):
            current_list = matrix[i]
            start_pointer = 0
            end_pointer = len(current_list)-1
            while start_pointer < end_pointer :
                temp = current_list[start_pointer]
                current_list[start_pointer] = current_list[end_pointer]
                current_list[end_pointer] = temp
                start_pointer = start_pointer + 1
                end_pointer = end_pointer -1