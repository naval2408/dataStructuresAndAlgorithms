MaXIMUM LENGTH BIOTONIC SUBARRAY
You are provided n numbers of array. You need to find the maximum length of bitonic subarray. A subarray A[i … j] is biotonic if there is a k with i <= k <= j such that A[i] <= A[i + 1] … <= A[k] >= A[k + 1] >= .. A[j – 1] > = A[j] i.e subarray is first increasing and then decreasing or entirely increasing or decreasing.

Input Format:
First line contains integer t which is number of test case. For each test case, it contains an integer n which is the size of array and next line contains n space separated integers.

Constraints:
1<=t<=100 1<=n<=1000000

Output Format
Print the maximum length.

Sample Input
2
6
12 4 78 90 45 23
4
40 30 20 10
Sample Output
5
4


test_cases = int(input())
for tc in range(test_cases):
    size_of_array = int(input())
    list_of_numbers = [int(x) for x in input().split()]
    strictly_increasing_subarray = [None]*size_of_array
    striclty_decreasng_subarray = [None]*size_of_array
    max_length_of_biotonic_subarray = 0
    for i in range(size_of_array):
        if i ==0 or list_of_numbers[i]<list_of_numbers[i-1]:
            strictly_increasing_subarray[i]=1
        else :
            strictly_increasing_subarray[i]=1+strictly_increasing_subarray[i-1]
    for i in range(size_of_array-1,-1,-1):
        if i == size_of_array-1 or list_of_numbers[i]<list_of_numbers[i+1] :
            striclty_decreasng_subarray[i]=1
        else:
            striclty_decreasng_subarray[i]=1+striclty_decreasng_subarray[i+1]
    for i in range(size_of_array):
        current_biotonic_length = striclty_decreasng_subarray[i]+strictly_increasing_subarray[i]-1
        max_length_of_biotonic_subarray = max(current_biotonic_length,max_length_of_biotonic_subarray)
    print(max_length_of_biotonic_subarray)