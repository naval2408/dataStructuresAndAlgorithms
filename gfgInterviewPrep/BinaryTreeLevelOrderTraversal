Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null)
        {
            return new ArrayList<List<Integer>>();
        }
        List<List<Integer>> resultantList = new ArrayList<List<Integer>>();
        List<Integer> currentList = new ArrayList<Integer>();
        Queue<TreeNode> pendingNodes = new LinkedList<>();
        pendingNodes.add(root);
        pendingNodes.add(null);
        while(pendingNodes.size()>0)
        {
            TreeNode currentNode = pendingNodes.remove();
            if(currentNode==null)
            {
                resultantList.add(currentList);
                if(pendingNodes.size()==0)
                {
                    break;
                }                
                currentList = new ArrayList<Integer>();
                pendingNodes.add(null);
            }
            else
            {
                currentList.add(currentNode.val);
                if(currentNode.left!=null)
                {
                    pendingNodes.add(currentNode.left);
                }
                
                if(currentNode.right!=null)
                {
                    pendingNodes.add(currentNode.right);
                }
                
                
            }
            
        }
        return resultantList;
    }
}