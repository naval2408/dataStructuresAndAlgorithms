class HashNode<K,V>
{
	K key;
	V value;
	HashNode<K,V> next;

public HashNode<K,V> (K key, V value)
{
	this.key=key;
	this.value = value;
}

}



 class Map <K,V>
 {
 private ArrayList<HashNode<Key,Val>> bucketArray;
 private int numBucket;
 private int size;

 
 public Map()
 {
 bucketArray = new ArrayList<HashNode<Key,Val>>();
 numbucket = 10;
 size = 0;

for(int i=0;i<numBucket;i++)
{
	bucketArray.add(null);
}

}



 public int size()
 {
 return size;
 }



 public boolean isEmpty()
 {
 return (size==0);
 }

 

 public int getBucketIndex(K key)
 {
 int hashCode = key.getHashCode();
 return hashCode%numBucket;
 }



public V remove(K key)
 {
int bucketIndex = getBucketIndex(key);
HashNode<K,V> head = bucketArray.get(bucketIndex);
HashNode<K,V> prev = null;
while(head!=null)
{
	if(head.key.equals(key))
	{
	break;
	}
	prev = head;
	head = head.next;
}

if(head==null)
{
	return null;
}
size --;

if(prev!=null)
{
	prev.next = head.next;
}

else
{
	bucketArray.set(bucketIndex,head.next);
}
return head.value;
 }





public V get(Key k)
 {
 int bucketIndex = getBucketIndex(key);
HashNode<K,V> head = bucketArray.get(bucketIndex);
while(head!=null)
{
	if(head.key.equals(key))
	{
	break;
	}
	head = head.next;
}
if(head==null)
{
	return null;
}

return head.value;
}


public void add(K key, V value)
{
{
 int bucketIndex = getBucketIndex(key);
HashNode<K,V> head = bucketArray.get(bucketIndex);
while(head!=null)
{
if(head.key.equals(key))
{
	head.value = value;
	return;
}
head=head.next;
}

size++;
head = bucketArray.get(bucketIndex);
HashNode node = new HashNode<K,V>(key,value);
node.next = head;
bucketArray.set(bucketIndex.node);

if(size/numBuckets>=0.7)
{
ArrayList<HashNode<K,V>> temp = bucketArray;
bucketArray = new ArrayList();
numBuckets=2*numBuckets;
size=0;
for(int i=0;i<numbucket;i++)
{
	bucketArray.add(null);
}

for(HashNode node :temp)
{
	while(node!=null)
	{
	add(node.key,node.value);
	node = node.next;
	}
}
}
	
}



 }