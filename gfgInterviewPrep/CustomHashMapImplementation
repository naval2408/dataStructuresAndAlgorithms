package randomJavaPractice;

import java.util.ArrayList;

public class CustomHashMapImplementation <K,V>{
    private ArrayList<HashNode> bucketArray;
    private int size;
    private int capacity;

    public CustomHashMapImplementation()
    {
        bucketArray = new ArrayList<HashNode>();
        size=0;
        capacity=10;
        for(int i =0 ; i<capacity;i++)
        {
            bucketArray.add(null);
        }

    }

    public int getSize()
    {
        return size;
    }

    public boolean isEmpty()
    {
        return (size==0);
    }

    public int getBucketIndex(K key)
    {
        int hashCode = key.hashCode();
        return hashCode%capacity;

    }

    public V remove (K key)
    {
        int getIndex = getBucketIndex(key);
        HashNode head = bucketArray.get(getIndex);
        HashNode prev = null;
        while (head!=null)
        {
            if (head.key.equals(key))
            {
                break;

            }
            prev = head;
            head = head.next;
        }

        if(head==null)
        {
            return null;
        }
        size--;
        if(prev!=null)
        {
            prev.next = head.next;
        }
        else
        {
            bucketArray.set(getIndex,head.next);
        }
        head.next=null;
        return (V) head.value;
    }

    public V getKey (K key)
    {
        int getIndex = getBucketIndex(key);
        HashNode head = bucketArray.get(getIndex);
        while(head!=null)
        {
            if(head.key.equals(key))
            {
                break;
            }
            head = head.next;
        }
        if (head==null)
        {
            return null;
        }
        else
        {
            return (V) head.value;
        }

    }

    public void add(K key, V value)
    {
        int bucketIndex = getBucketIndex(key);
        HashNode<K,V> head = bucketArray.get(bucketIndex);
        while(head!=null)
        {
            if(head.key.equals(key))
            {
                break;
            }
            head = head.next;
        }
        if(head!=null)
        {
            head.value=value;
            return;
        }
        else
        {
            size++;
            HashNode<K,V> node = new HashNode<>(key,value);
            node.next = head;
            bucketArray.set(bucketIndex,node);
            if(size/capacity>0.7)
            {
                ArrayList<HashNode> tempList = bucketArray;
                bucketArray= new ArrayList<HashNode>();
                capacity=capacity*2;
                size=0;
                for(int i = 0; i<capacity;i++)
                {
                    bucketArray.set(i,null);
                }
                for(HashNode tempNode : tempList)
                {
                    while (tempNode!=null)
                    {
                        add((K)tempNode.key,(V)tempNode.value);
                        node=node.next;
                    }
                }
            }
        }

    }

}
